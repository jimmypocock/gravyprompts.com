AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    Runtime: nodejs20.x
    Timeout: 30
    Layers:
      - !Ref SharedLayer
    Environment:
      Variables:
        TEMPLATES_TABLE: local-templates
        TEMPLATE_VIEWS_TABLE: local-template-views
        USER_PROMPTS_TABLE: local-user-prompts
        USER_PERMISSIONS_TABLE: local-user-permissions
        APPROVAL_HISTORY_TABLE: local-approval-history
        ENVIRONMENT: development
        USER_POOL_ID: local-user-pool
        AWS_ENDPOINT_URL_DYNAMODB: http://host.docker.internal:8000

Resources:
  SharedLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: SharedLayer
      ContentUri: ../lambda-layers/shared/
      CompatibleRuntimes:
        - nodejs20.x
  TemplatesApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: local
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"

  CreateTemplateFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambda/templates/
      Handler: create.handler
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref TemplatesApi
            Path: /templates
            Method: POST

  GetTemplateFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambda/templates/
      Handler: get.handler
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref TemplatesApi
            Path: /templates/{templateId}
            Method: GET

  ListTemplatesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambda/templates/
      Handler: list.handler
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref TemplatesApi
            Path: /templates
            Method: GET
        OptionsEvent:
          Type: Api
          Properties:
            RestApiId: !Ref TemplatesApi
            Path: /templates
            Method: OPTIONS

  UpdateTemplateFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambda/templates/
      Handler: update.handler
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref TemplatesApi
            Path: /templates/{templateId}
            Method: PUT

  DeleteTemplateFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambda/templates/
      Handler: delete.handler
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref TemplatesApi
            Path: /templates/{templateId}
            Method: DELETE

  ShareTemplateFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambda/templates/
      Handler: share.handler
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref TemplatesApi
            Path: /templates/{templateId}/share
            Method: POST

  PopulateTemplateFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambda/templates/
      Handler: populate.handler
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref TemplatesApi
            Path: /templates/{templateId}/populate
            Method: POST

  # User Prompts Functions
  SavePromptFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambda/prompts/
      Handler: save.handler
      Environment:
        Variables:
          USER_PROMPTS_TABLE: local-user-prompts
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref TemplatesApi
            Path: /prompts
            Method: POST

  ListPromptsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambda/prompts/
      Handler: list.handler
      Environment:
        Variables:
          USER_PROMPTS_TABLE: local-user-prompts
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref TemplatesApi
            Path: /prompts
            Method: GET

  DeletePromptFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambda/prompts/
      Handler: delete.handler
      Environment:
        Variables:
          USER_PROMPTS_TABLE: local-user-prompts
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref TemplatesApi
            Path: /prompts/{promptId}
            Method: DELETE

  # Admin Functions
  PermissionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambda/admin/
      Handler: permissions.handler
      Events:
        ListUsersEvent:
          Type: Api
          Properties:
            RestApiId: !Ref TemplatesApi
            Path: /admin/permissions/users
            Method: GET
        GetUserPermissionsEvent:
          Type: Api
          Properties:
            RestApiId: !Ref TemplatesApi
            Path: /admin/permissions/user/{userId}
            Method: GET
        GetMyPermissionsEvent:
          Type: Api
          Properties:
            RestApiId: !Ref TemplatesApi
            Path: /admin/permissions/me
            Method: GET
        GrantPermissionEvent:
          Type: Api
          Properties:
            RestApiId: !Ref TemplatesApi
            Path: /admin/permissions
            Method: POST
        RevokePermissionEvent:
          Type: Api
          Properties:
            RestApiId: !Ref TemplatesApi
            Path: /admin/permissions/{userId}/{permission}
            Method: DELETE

  ApprovalFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../lambda/admin/
      Handler: approval.handler
      Events:
        GetQueueEvent:
          Type: Api
          Properties:
            RestApiId: !Ref TemplatesApi
            Path: /admin/approval/queue
            Method: GET
        GetHistoryEvent:
          Type: Api
          Properties:
            RestApiId: !Ref TemplatesApi
            Path: /admin/approval/history
            Method: GET
        ProcessApprovalEvent:
          Type: Api
          Properties:
            RestApiId: !Ref TemplatesApi
            Path: /admin/approval/template/{templateId}
            Method: POST
        # OPTIONS for CORS
        QueueOptionsEvent:
          Type: Api
          Properties:
            RestApiId: !Ref TemplatesApi
            Path: /admin/approval/queue
            Method: OPTIONS
        HistoryOptionsEvent:
          Type: Api
          Properties:
            RestApiId: !Ref TemplatesApi
            Path: /admin/approval/history
            Method: OPTIONS
        PermissionsUsersOptionsEvent:
          Type: Api
          Properties:
            RestApiId: !Ref TemplatesApi
            Path: /admin/permissions/users
            Method: OPTIONS
        PermissionsMeOptionsEvent:
          Type: Api
          Properties:
            RestApiId: !Ref TemplatesApi
            Path: /admin/permissions/me
            Method: OPTIONS