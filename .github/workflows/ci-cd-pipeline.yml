name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch: # Allow manual triggering

env:
  NODE_VERSION: '20.x'
  AWS_REGION: 'us-east-1'

# Permissions needed for OIDC authentication
permissions:
  id-token: write      # Required for OIDC
  contents: read       # Required for actions/checkout
  pull-requests: write # For PR comments

jobs:
  # Job 1: Code Quality & Linting
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit
      
      - name: Run ESLint
        run: npm run lint
      
      - name: Check TypeScript
        run: npm run type-check || npx tsc --noEmit
      
      - name: Check formatting
        run: npx prettier --check "**/*.{js,jsx,ts,tsx,json,css,md}"

  # Job 2: Unit Tests (Parallelized)
  unit-tests:
    name: Unit Tests - ${{ matrix.test-suite }}
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      matrix:
        test-suite:
          - 'lambda'
          - 'components'
          - 'security'
          - 'contracts'
      fail-fast: false
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit
      
      - name: Run ${{ matrix.test-suite }} tests
        run: |
          if [ "${{ matrix.test-suite }}" == "lambda" ]; then
            npm test -- __tests__/lambda --coverage --coverageDirectory=coverage-lambda
          elif [ "${{ matrix.test-suite }}" == "components" ]; then
            npm test -- __tests__/components --coverage --coverageDirectory=coverage-components
          elif [ "${{ matrix.test-suite }}" == "security" ]; then
            npm test -- __tests__/security --coverage --coverageDirectory=coverage-security
          elif [ "${{ matrix.test-suite }}" == "contracts" ]; then
            npm test -- __tests__/contracts --coverage --coverageDirectory=coverage-contracts
          fi
      
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.test-suite }}
          path: coverage-${{ matrix.test-suite }}
          retention-days: 1

  # Job 3: Integration & E2E Tests
  integration-tests:
    name: Integration & E2E Tests
    runs-on: ubuntu-latest
    needs: code-quality
    services:
      dynamodb:
        image: amazon/dynamodb-local:latest
        ports:
          - 8000:8000
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit
      
      - name: Setup local environment
        run: |
          npm run local:setup:ci
          npm run local:seed:test
      
      - name: Run integration tests
        run: npm test -- __tests__/integration --runInBand
        env:
          DYNAMODB_ENDPOINT: http://localhost:8000
      
      - name: Run E2E tests
        run: npm test -- __tests__/e2e --runInBand
        env:
          NEXT_PUBLIC_API_URL: http://localhost:7429

  # Job 4: Performance Tests (on schedule or manual)
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit
      
      - name: Run performance tests
        run: npm test -- __tests__/performance --runInBand
      
      - name: Upload performance report
        uses: actions/upload-artifact@v4
        with:
          name: performance-report
          path: performance-report.json
          retention-days: 30

  # Job 5: Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Run npm audit
        run: npm audit --production --audit-level=high
        continue-on-error: true
      
      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      
      - name: Run OWASP dependency check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'gravyprompts'
          path: '.'
          format: 'HTML'
      
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: reports/
          retention-days: 30

  # Job 6: Build & Package
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit
      
      - name: Build application
        run: npm run build:all
        env:
          NEXT_PUBLIC_GA_MEASUREMENT_ID: ${{ secrets.GA_MEASUREMENT_ID }}
          NEXT_PUBLIC_ADSENSE_CLIENT_ID: ${{ secrets.ADSENSE_CLIENT_ID }}
      
      - name: Build CDK
        run: |
          cd cdk
          npm ci
          npm run build
          npx cdk synth
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            .next/
            out/
            cdk/cdk.out/
          retention-days: 1

  # Job 7: Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/gravyprompts-github-actions-oidc
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Deploy backend (CDK)
        run: |
          cd cdk
          npm ci
          npx cdk deploy --all --require-approval never
        env:
          CDK_DEFAULT_ACCOUNT: ${{ secrets.AWS_ACCOUNT_ID }}
          CDK_DEFAULT_REGION: ${{ env.AWS_REGION }}
          ENVIRONMENT: staging
      
      - name: Run smoke tests
        run: |
          npm run test:smoke:staging
        env:
          NODE_ENV: staging

  # Job 8: Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security-scan, performance-tests]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/gravyprompts-github-actions-oidc
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Deploy backend (CDK)
        run: |
          cd cdk
          npm ci
          npx cdk deploy --all --require-approval never
        env:
          CDK_DEFAULT_ACCOUNT: ${{ secrets.AWS_ACCOUNT_ID }}
          CDK_DEFAULT_REGION: ${{ env.AWS_REGION }}
          ENVIRONMENT: production
      
      - name: Trigger Amplify deployment
        run: |
          aws amplify start-job \
            --app-id ${{ secrets.AMPLIFY_APP_ID }} \
            --branch-name main \
            --job-type RELEASE
      
      - name: Wait for Amplify deployment
        run: |
          chmod +x scripts/deployment/wait-for-amplify.sh
          ./scripts/deployment/wait-for-amplify.sh
        timeout-minutes: 20
      
      - name: Run smoke tests
        run: |
          npm run test:smoke:production
        env:
          NODE_ENV: production
      
      - name: Notify deployment success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: 'âœ… Production deployment successful!'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Job 9: Post-deployment validation
  post-deployment:
    name: Post-deployment Validation
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Run health checks
        run: |
          npm run check:health:all
      
      - name: Generate deployment report
        run: |
          npm run report:deployment
      
      - name: Upload deployment report
        uses: actions/upload-artifact@v4
        with:
          name: deployment-report
          path: deployment-report.html
          retention-days: 90

# Reusable workflow for hotfixes
on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string